name: Build VulpixOS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential gcc make binutils libc6-dev
        sudo apt install -y bc bison flex libssl-dev libelf-dev
        sudo apt install -y debootstrap squashfs-tools genisoimage xorriso
        sudo apt install -y isolinux syslinux-utils
    
    - name: Create directory structure
      run: |
        mkdir -p build rootfs boot iso/boot/grub iso/live kernel scripts config
    
    - name: Download kernel source
      run: |
        cd build
        wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.150.tar.xz
        cd ..
    
    - name: Extract and build kernel
      run: |
        cd kernel
        tar -xf ../build/linux-5.10.150.tar.xz
        cd linux-5.10.150
        make defconfig
        # Enable some desktop features
        scripts/config --enable CONFIG_DRM
        scripts/config --enable CONFIG_SND
        scripts/config --enable CONFIG_EXT4_FS
        make -j$(nproc)
        # Copy kernel
        cp arch/x86/boot/bzImage ../../boot/vmlinuz
        cp System.map ../../boot/
    
    - name: Create base rootfs
      run: |
        sudo debootstrap --variant=minbase --include=systemd,init,busybox,live-boot,network-manager jammy rootfs http://archive.ubuntu.com/ubuntu/
    
    - name: Install kernel modules
      run: |
        cd kernel/linux-5.10.150
        sudo make INSTALL_MOD_PATH=../../rootfs modules_install
        cd ../..
    
    - name: Configure base system
      run: |
        # Fix resolv.conf
        sudo rm -f rootfs/etc/resolv.conf
        sudo cp /etc/resolv.conf rootfs/etc/resolv.conf
        
        # Mount for chroot
        sudo mount --bind /dev rootfs/dev
        sudo mount --bind /dev/pts rootfs/dev/pts
        sudo mount --bind /proc rootfs/proc
        sudo mount --bind /sys rootfs/sys
        sudo mount --bind /run rootfs/run
        
        # Configure system in chroot
        sudo chroot rootfs /bin/bash -c "
          export HOME=/root
          export LC_ALL=C
          export DEBIAN_FRONTEND=noninteractive
          
          # Update and configure
          apt update
          apt install -y locales initramfs-tools
          locale-gen en_US.UTF-8
          update-locale LANG=en_US.UTF-8
          
          # Set hostname
          echo 'vulpixos' > /etc/hostname
          echo '127.0.0.1 localhost vulpixos' >> /etc/hosts
          
          # Create user
          useradd -m -s /bin/bash -G sudo vulpix
          echo 'vulpix:vulpix' | chpasswd
          echo 'root:root' | chpasswd
          
          # Create initramfs
          update-initramfs -c -k all
          cp /boot/initrd.img-* /boot/initrd.img
        "
        
        # Copy initramfs
        sudo cp rootfs/boot/initrd.img* boot/
        
        # Cleanup mounts
        sudo umount rootfs/run rootfs/sys rootfs/proc rootfs/dev/pts rootfs/dev
    
    - name: Create GRUB configuration
      run: |
        cat > iso/boot/grub/grub.cfg << 'EOF'
        set timeout=5
        set default=0
        
        menuentry "VulpixOS Live" {
            linux /boot/vmlinuz boot=live live-media-path=/live/ toram
            initrd /boot/initrd.img
        }
        
        menuentry "VulpixOS Install" {
            linux /boot/vmlinuz boot=live live-media-path=/live/
            initrd /boot/initrd.img
        }
        EOF
    
    - name: Copy boot files to ISO
      run: |
        cp boot/vmlinuz iso/boot/
        cp boot/initrd.img iso/boot/
    
    - name: Create squashfs filesystem
      run: |
        sudo mksquashfs rootfs iso/live/filesystem.squashfs -comp lz4 -processors $(nproc)
    
    - name: Create ISO
      run: |
        grub-mkrescue -o VulpixOS.iso iso/
        ls -lh VulpixOS.iso
    
    - name: Upload ISO as artifact
      uses: actions/upload-artifact@v4
      with:
        name: VulpixOS-ISO
        path: VulpixOS.iso
        retention-days: 30
    
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: VulpixOS.iso
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}