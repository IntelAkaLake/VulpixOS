name: Build VulpixOS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential gcc make binutils libc6-dev
        sudo apt install -y bc bison flex libssl-dev libelf-dev
        sudo apt install -y debootstrap squashfs-tools genisoimage xorriso
        sudo apt install -y isolinux syslinux-utils grub-pc-bin grub-efi-amd64-bin
        sudo apt install -y mtools dosfstools   
    
    - name: Create directory structure
      run: |
        mkdir -p build rootfs boot iso/boot/grub iso/live kernel scripts config
    
    - name: Download kernel source
      run: |
        cd build
        wget -c https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.150.tar.xz
        cd ..
    
    - name: Extract and build kernel
      run: |
        cd kernel
        tar -xf ../build/linux-5.10.150.tar.xz
        cd linux-5.10.150
        make defconfig
        
        # Enable essential features
        scripts/config --enable CONFIG_DRM
        scripts/config --enable CONFIG_DRM_I915
        scripts/config --enable CONFIG_SND
        scripts/config --enable CONFIG_SND_HDA_INTEL
        scripts/config --enable CONFIG_EXT4_FS
        scripts/config --enable CONFIG_SQUASHFS
        scripts/config --enable CONFIG_OVERLAY_FS
        scripts/config --enable CONFIG_TMPFS
        scripts/config --enable CONFIG_DEVTMPFS
        scripts/config --enable CONFIG_DEVTMPFS_MOUNT
        
        make -j$(nproc)
        
        # Copy kernel with version detection
        KERNEL_VERSION=$(make kernelversion)
        cp arch/x86/boot/bzImage ../../boot/vmlinuz-${KERNEL_VERSION}
        cp System.map ../../boot/System.map-${KERNEL_VERSION}
        ln -sf vmlinuz-${KERNEL_VERSION} ../../boot/vmlinuz
        ln -sf System.map-${KERNEL_VERSION} ../../boot/System.map
        
        cd ../..
    
    - name: Create base rootfs
      run: |
        sudo debootstrap --variant=minbase --include=systemd,init jammy rootfs http://archive.ubuntu.com/ubuntu/
    
    - name: Install kernel modules
      run: |
        cd kernel/linux-5.10.150
        sudo make INSTALL_MOD_PATH=../../rootfs modules_install
        cd ../..
    
    - name: Configure base system
      run: |
        # Prepare chroot
        sudo cp /etc/resolv.conf rootfs/etc/resolv.conf
        
        # Mount for chroot
        sudo mount --bind /dev rootfs/dev
        sudo mount --bind /dev/pts rootfs/dev/pts
        sudo mount --bind /proc rootfs/proc
        sudo mount --bind /sys rootfs/sys
        
        # Configure system in chroot
        sudo chroot rootfs /bin/bash << 'CHROOT_EOF'
        export HOME=/root
        export LC_ALL=C
        export DEBIAN_FRONTEND=noninteractive
        
        # Add repositories
        cat > /etc/apt/sources.list << 'EOF'
        deb http://archive.ubuntu.com/ubuntu jammy main universe
        deb http://archive.ubuntu.com/ubuntu jammy-updates main universe
        deb http://security.ubuntu.com/ubuntu jammy-security main universe
        EOF
        
        # Update and install packages
        apt update
        
        # Install essential packages
        apt install -y --no-install-recommends \
          systemd init locales \
          initramfs-tools \
          live-boot live-boot-initramfs-tools \
          busybox-initramfs \
          network-manager \
          sudo bash-completion vim-tiny less
        
        # Install GNOME desktop
        apt install -y --no-install-recommends \
          ubuntu-desktop-minimal \
          gnome-session gdm3 \
          firefox nautilus gnome-terminal
        
        # Configure locales
        locale-gen en_US.UTF-8
        update-locale LANG=en_US.UTF-8
        
        # Set hostname
        echo 'vulpixos' > /etc/hostname
        echo '127.0.0.1 localhost vulpixos' >> /etc/hosts
        
        # Create user
        useradd -m -s /bin/bash -G sudo vulpix
        echo 'vulpix:vulpix' | chpasswd
        echo 'root:root' | chpasswd
        
        # Configure auto-login
        mkdir -p /etc/systemd/system/getty@tty1.service.d
        cat > /etc/systemd/system/getty@tty1.service.d/override.conf << 'EOF'
        [Service]
        ExecStart=
        ExecStart=-/sbin/agetty --autologin vulpix --noclear %I $TERM
        EOF
        
        # Enable services
        systemctl enable NetworkManager
        
        # Check what kernel modules we have
        echo "Available kernel modules:"
        ls -la /lib/modules/
        
        # Get the kernel version
        KERNEL_VERSION=$(ls /lib/modules/ | head -1)
        echo "Using kernel version: $KERNEL_VERSION"
        
        # Create initramfs with explicit kernel version
        if [ -n "$KERNEL_VERSION" ]; then
            update-initramfs -c -k "$KERNEL_VERSION"
            
            # Check if it was created
            if [ -f "/boot/initrd.img-$KERNEL_VERSION" ]; then
                cp "/boot/initrd.img-$KERNEL_VERSION" /boot/initrd.img
                echo "Successfully created initrd.img"
            else
                echo "update-initramfs failed, trying mkinitramfs..."
                mkinitramfs -o "/boot/initrd.img-$KERNEL_VERSION" "$KERNEL_VERSION"
                cp "/boot/initrd.img-$KERNEL_VERSION" /boot/initrd.img
            fi
        else
            echo "ERROR: No kernel version found!"
            exit 1
        fi
        
        CHROOT_EOF
        
        # Copy initramfs to host boot directory with error checking
        if [ -f rootfs/boot/initrd.img ]; then
            sudo cp rootfs/boot/initrd.img boot/initrd.img
        else
            echo "ERROR: No initrd.img found in rootfs!"
            echo "Contents of rootfs/boot:"
            sudo ls -la rootfs/boot/
            exit 1
        fi
        
        # Cleanup mounts
        sudo umount rootfs/sys rootfs/proc rootfs/dev/pts rootfs/dev
    
    - name: Create GRUB configuration
      run: |
        cat > iso/boot/grub/grub.cfg << 'EOF'
        set timeout=5
        set default=0
        
        menuentry "VulpixOS Live" {
            linux /boot/vmlinuz boot=live live-media-path=/live/ toram quiet splash
            initrd /boot/initrd.img
        }
        
        menuentry "VulpixOS Install Mode" {
            linux /boot/vmlinuz boot=live live-media-path=/live/ quiet splash
            initrd /boot/initrd.img
        }
        
        menuentry "VulpixOS Safe Mode" {
            linux /boot/vmlinuz boot=live live-media-path=/live/ nomodeset
            initrd /boot/initrd.img
        }
        EOF
    
    - name: Copy boot files to ISO
      run: |
        # Check if files exist before copying
        if [ ! -f boot/vmlinuz ]; then
            echo "ERROR: vmlinuz not found!"
            ls -la boot/
            exit 1
        fi
        
        if [ ! -f boot/initrd.img ]; then
            echo "ERROR: initrd.img not found!"
            ls -la boot/
            
            # Try to find it in rootfs
            echo "Searching for initrd in rootfs..."
            sudo find rootfs/boot -name "initrd*" -type f
            
            # Try to create it manually
            echo "Creating initrd manually..."
            sudo chroot rootfs /bin/bash -c "
                export HOME=/root
                export LC_ALL=C
                export DEBIAN_FRONTEND=noninteractive
                KERNEL_VERSION=\$(ls /lib/modules/ | head -1)
                mkinitramfs -o /boot/initrd.img-manual \$KERNEL_VERSION
                cp /boot/initrd.img-manual /boot/initrd.img
            "
            sudo cp rootfs/boot/initrd.img boot/initrd.img
        fi
        
        cp boot/vmlinuz iso/boot/
        cp boot/initrd.img iso/boot/
    
    - name: Create squashfs filesystem
      run: |
        sudo mksquashfs rootfs iso/live/filesystem.squashfs -comp xz -processors $(nproc) -b 1M
    
    - name: Create ISO
      run: |
        grub-mkrescue -o VulpixOS.iso iso/
        ls -lh VulpixOS.iso
    
    - name: Upload ISO as artifact
      uses: actions/upload-artifact@v4
      with:
        name: VulpixOS-ISO
        path: VulpixOS.iso
        retention-days: 30
    
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: VulpixOS.iso
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}