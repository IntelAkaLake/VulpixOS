name: Build VulpixOS Stable

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential gcc make binutils libc6-dev
        sudo apt install -y bc bison flex libssl-dev libelf-dev
        sudo apt install -y debootstrap squashfs-tools genisoimage xorriso
        sudo apt install -y isolinux syslinux-utils grub-pc-bin grub-efi-amd64-bin
        sudo apt install -y mtools dosfstools grub-common grub2-common
        sudo apt install -y syslinux syslinux-common cpio
        sudo apt install -y rsync curl wget
    
    - name: Create directory structure
      run: |
        mkdir -p build rootfs boot iso/{boot/{grub,isolinux},EFI/boot,live} kernel scripts config
        mkdir -p rootfs-work
    
    - name: Download and build minimal kernel
      run: |
        cd build
        wget -c https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.1.62.tar.xz
        tar -xf linux-6.1.62.tar.xz
        cd linux-6.1.62
        
        # Use a proven stable config
        make defconfig
        
        # Essential but minimal kernel config for maximum stability
        scripts/config --disable CONFIG_DEBUG_INFO
        scripts/config --disable CONFIG_DEBUG_KERNEL
        scripts/config --disable CONFIG_KALLSYMS
        scripts/config --disable CONFIG_SECURITY_SELINUX
        scripts/config --disable CONFIG_SECURITY_SMACK
        scripts/config --disable CONFIG_SECURITY_TOMOYO
        scripts/config --disable CONFIG_SECURITY_APPARMOR
        scripts/config --set-str CONFIG_DEFAULT_SECURITY ""
        scripts/config --disable CONFIG_DEFAULT_SECURITY_SELINUX
        scripts/config --disable CONFIG_DEFAULT_SECURITY_SMACK
        scripts/config --disable CONFIG_DEFAULT_SECURITY_TOMOYO
        scripts/config --disable CONFIG_DEFAULT_SECURITY_APPARMOR
        
        # Enable essential features
        scripts/config --enable CONFIG_EXT4_FS
        scripts/config --enable CONFIG_SQUASHFS
        scripts/config --enable CONFIG_SQUASHFS_XZ
        scripts/config --enable CONFIG_OVERLAY_FS
        scripts/config --enable CONFIG_TMPFS
        scripts/config --enable CONFIG_DEVTMPFS
        scripts/config --enable CONFIG_DEVTMPFS_MOUNT
        scripts/config --enable CONFIG_PROC_FS
        scripts/config --enable CONFIG_SYSFS
        scripts/config --enable CONFIG_KERNEL_XZ
        scripts/config --enable CONFIG_RD_XZ
        
        # EFI support
        scripts/config --enable CONFIG_EFI
        scripts/config --enable CONFIG_EFI_STUB
        scripts/config --enable CONFIG_EFI_MIXED
        scripts/config --enable CONFIG_EFI_VARS
        scripts/config --enable CONFIG_FB_EFI
        
        # Basic graphics
        scripts/config --enable CONFIG_FB
        scripts/config --enable CONFIG_FB_VESA
        scripts/config --enable CONFIG_FRAMEBUFFER_CONSOLE
        scripts/config --enable CONFIG_VT
        scripts/config --enable CONFIG_VT_CONSOLE
        scripts/config --enable CONFIG_VGA_CONSOLE
        scripts/config --enable CONFIG_DRM
        scripts/config --enable CONFIG_DRM_FBDEV_EMULATION
        
        # Network
        scripts/config --enable CONFIG_ETHERNET
        scripts/config --enable CONFIG_NET_VENDOR_INTEL
        scripts/config --enable CONFIG_E1000
        scripts/config --enable CONFIG_E1000E
        
        # USB
        scripts/config --enable CONFIG_USB
        scripts/config --enable CONFIG_USB_EHCI_HCD
        scripts/config --enable CONFIG_USB_OHCI_HCD
        scripts/config --enable CONFIG_USB_UHCI_HCD
        scripts/config --enable CONFIG_USB_XHCI_HCD
        scripts/config --enable CONFIG_USB_STORAGE
        
        # Sound
        scripts/config --enable CONFIG_SOUND
        scripts/config --enable CONFIG_SND
        scripts/config --enable CONFIG_SND_HDA_INTEL
        scripts/config --enable CONFIG_SND_HDA_CODEC_REALTEK
        
        make -j$(nproc)
        
        # Copy kernel files
        KERNEL_VERSION=$(make kernelversion)
        cp arch/x86/boot/bzImage ../../boot/vmlinuz-${KERNEL_VERSION}
        cp System.map ../../boot/System.map-${KERNEL_VERSION}
        ln -sf vmlinuz-${KERNEL_VERSION} ../../boot/vmlinuz
        ln -sf System.map-${KERNEL_VERSION} ../../boot/System.map
        
        echo "Kernel version: $KERNEL_VERSION" > ../../boot/kernel-version
        echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
        
        cd ../..
    
    - name: Create base rootfs with proper branding
      run: |
        # Use Ubuntu 22.04 as base but we'll rebrand it completely
        sudo debootstrap --variant=minbase --include=systemd,systemd-sysv,dbus,init jammy rootfs http://archive.ubuntu.com/ubuntu/
        
        # Install kernel modules
        cd build/linux-6.1.62
        sudo make INSTALL_MOD_PATH=../../rootfs modules_install
        cd ../..
    
    - name: Create VulpixOS branding and configuration
      run: |
        cat > configure_vulpixos.sh << 'SCRIPT_EOF'
        #!/bin/bash
        set -e
        export HOME=/root
        export LC_ALL=C
        export DEBIAN_FRONTEND=noninteractive
        export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        
        # Configure APT sources
        cat > /etc/apt/sources.list << 'APT_EOF'
        deb http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
        deb http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
        deb http://security.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
        APT_EOF
        
        apt update
        
        # Install essential packages first
        apt install -y --no-install-recommends \
          systemd systemd-sysv init udev dbus \
          locales tzdata sudo passwd \
          file rsync uuid-runtime \
          bash-completion vim nano less \
          curl wget ca-certificates \
          network-manager wireless-tools \
          wpasupplicant dhcpcd5 || {
            echo "Essential packages installation failed"
            exit 1
        }
        
        # Install live boot system
        apt install -y --no-install-recommends \
          live-boot live-boot-initramfs-tools \
          initramfs-tools busybox-initramfs || {
            echo "Live boot packages installation failed"
            exit 1
        }
        
        # Install X11 and minimal graphics
        apt install -y --no-install-recommends \
          xorg xserver-xorg-video-all \
          xserver-xorg-input-all \
          mesa-utils || {
            echo "X11 packages installation failed"
            exit 1
        }
        
        # Install GNOME (minimal but complete)
        apt install -y --no-install-recommends \
          gnome-session gnome-shell \
          gdm3 gnome-terminal nautilus \
          gnome-control-center \
          gnome-settings-daemon \
          pulseaudio alsa-utils \
          fonts-dejavu-core fonts-liberation
        
        # Install Firefox (regular version for Ubuntu 22.04)
        apt install -y --no-install-recommends firefox || {
            echo "Firefox installation failed, trying snap alternative..."
            apt install -y --no-install-recommends snapd
            snap install firefox
        }
        
        # === VULPIXOS BRANDING ===
        
        # Create VulpixOS release info
        cat > /etc/os-release << 'OS_EOF'
        PRETTY_NAME="VulpixOS 1.0"
        NAME="VulpixOS"
        VERSION_ID="1.0"
        VERSION="1.0 (Stable)"
        ID=vulpixos
        ID_LIKE=debian
        HOME_URL="https://github.com/yourusername/vulpixos"
        SUPPORT_URL="https://github.com/yourusername/vulpixos/issues"
        BUG_REPORT_URL="https://github.com/yourusername/vulpixos/issues"
        OS_EOF
        
        # Create lsb-release for compatibility
        cat > /etc/lsb-release << 'LSB_EOF'
        DISTRIB_ID=VulpixOS
        DISTRIB_RELEASE=1.0
        DISTRIB_CODENAME=stable
        DISTRIB_DESCRIPTION="VulpixOS 1.0"
        LSB_EOF
        
        # Create VulpixOS version file
        cat > /etc/vulpixos-version << 'VER_EOF'
        VulpixOS 1.0 Stable
        Built: $(date)
        Kernel: $(uname -r)
        VER_EOF
        
        # Update hostname and hosts
        echo 'vulpixos' > /etc/hostname
        cat > /etc/hosts << 'HOSTS_EOF'
        127.0.0.1   localhost vulpixos
        ::1         localhost ip6-localhost ip6-loopback
        ff02::1     ip6-allnodes
        ff02::2     ip6-allrouters
        HOSTS_EOF
        
        # Configure locales
        echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
        locale-gen
        update-locale LANG=en_US.UTF-8
        
        # Set timezone
        ln -sf /usr/share/zoneinfo/UTC /etc/localtime
        
        # Create vulpix user
        useradd -m -s /bin/bash -G sudo,audio,video,plugdev,netdev vulpix
        echo 'vulpix:live' | chpasswd
        echo 'root:root' | chpasswd
        
        # Configure sudo
        echo 'vulpix ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/vulpix
        
        # Configure auto-login
        mkdir -p /etc/gdm3
        cat > /etc/gdm3/custom.conf << 'GDM_EOF'
        [daemon]
        AutomaticLoginEnable=true
        AutomaticLogin=vulpix
        
        [security]
        
        [xdmcp]
        
        [chooser]
        
        [debug]
        GDM_EOF
        
        # Configure live boot
        cat > /etc/casper.conf << 'CASPER_EOF'
        export USERNAME="vulpix"
        export USERFULLNAME="VulpixOS User"
        export HOST="vulpixos"
        export BUILD_SYSTEM="VulpixOS"
        CASPER_EOF
        
        # Disable problematic services for stability
        systemctl mask apparmor.service || true
        systemctl mask snapd.service || true
        systemctl mask snapd.socket || true
        systemctl mask ModemManager.service || true
        systemctl mask systemd-resolved.service || true
        
        # Enable essential services
        systemctl enable systemd-networkd
        systemctl enable NetworkManager
        systemctl enable gdm3
        
        # Configure NetworkManager for stability
        cat > /etc/NetworkManager/NetworkManager.conf << 'NM_EOF'
        [main]
        plugins=ifupdown,keyfile
        dns=default
        
        [ifupdown]
        managed=false
        
        [device]
        wifi.scan-rand-mac-address=no
        NM_EOF
        
        # Remove Ubuntu branding and add VulpixOS
        rm -f /etc/issue /etc/issue.net
        cat > /etc/issue << 'ISSUE_EOF'
        VulpixOS 1.0 Stable \n \l
        
        ISSUE_EOF
        
        cat > /etc/issue.net << 'ISSUE_NET_EOF'
        VulpixOS 1.0 Stable
        ISSUE_NET_EOF
        
        # Create a VulpixOS welcome message
        cat > /etc/motd << 'MOTD_EOF'
        
        Welcome to VulpixOS 1.0 Stable
        ===============================
        
        A minimal, stable Linux distribution built for reliability.
        
        Default credentials:
        - Username: vulpix
        - Password: live
        
        For support, visit: https://github.com/yourusername/vulpixos
        
        MOTD_EOF
        
        # Create neofetch config for VulpixOS branding
        mkdir -p /home/vulpix/.config/neofetch
        cat > /home/vulpix/.config/neofetch/config.conf << 'NEOFETCH_EOF'
        print_info() {
            info title
            info underline
            info "OS" distro
            info "Host" model
            info "Kernel" kernel
            info "Uptime" uptime
            info "Packages" packages
            info "Shell" shell
            info "Resolution" resolution
            info "DE" de
            info "WM" wm
            info "WM Theme" wm_theme
            info "Theme" theme
            info "Icons" icons
            info "Terminal" term
            info "Terminal Font" term_font
            info "CPU" cpu
            info "GPU" gpu
            info "Memory" memory
            info cols
        }
        
        # Override distro detection
        distro="VulpixOS"
        os_arch="on"
        NEOFETCH_EOF
        
        chown -R vulpix:vulpix /home/vulpix/.config
        
        # Install neofetch
        apt install -y --no-install-recommends neofetch
        
        # Create initramfs
        KERNEL_VERSION=$(ls /lib/modules/ | head -1)
        echo "Creating initramfs for kernel: $KERNEL_VERSION"
        
        if [ -n "$KERNEL_VERSION" ] && [ -d "/lib/modules/$KERNEL_VERSION" ]; then
            update-initramfs -c -k "$KERNEL_VERSION"
            
            if [ -f "/boot/initrd.img-$KERNEL_VERSION" ]; then
                ln -sf "initrd.img-$KERNEL_VERSION" /boot/initrd.img
                echo "Initramfs created successfully"
            else
                echo "ERROR: Failed to create initramfs"
                exit 1
            fi
        else
            echo "ERROR: Kernel version not found"
            exit 1
        fi
        
        # Clean up
        apt autoremove -y
        apt autoclean
        
        # Clear machine-id and logs for live system
        truncate -s 0 /etc/machine-id
        rm -rf /var/log/* /tmp/* /var/tmp/*
        
        # Create directories that might be needed
        mkdir -p /var/log /tmp /var/tmp
        chmod 1777 /tmp /var/tmp
        
        echo "VulpixOS configuration completed successfully"
        SCRIPT_EOF
        
        chmod +x configure_vulpixos.sh
    
    - name: Configure VulpixOS system
      run: |
        # Prepare chroot environment
        sudo cp /etc/resolv.conf rootfs/etc/resolv.conf
        sudo cp configure_vulpixos.sh rootfs/configure_vulpixos.sh
        
        # Mount required filesystems
        sudo mount --bind /dev rootfs/dev
        sudo mount --bind /dev/pts rootfs/dev/pts
        sudo mount --bind /proc rootfs/proc
        sudo mount --bind /sys rootfs/sys
        
        # Run configuration in chroot
        sudo chroot rootfs /configure_vulpixos.sh
        
        # Copy initramfs
        sudo cp rootfs/boot/initrd.img* boot/ || true
        sudo cp rootfs/boot/initrd.img boot/ || true
        
        # Cleanup
        sudo rm -f rootfs/configure_vulpixos.sh
        sudo umount rootfs/sys || true
        sudo umount rootfs/proc || true
        sudo umount rootfs/dev/pts || true
        sudo umount rootfs/dev || true
        sudo rm -f rootfs/etc/resolv.conf
    
    - name: Setup bootloader files
      run: |
        # Install GRUB files for BIOS boot
        sudo mkdir -p iso/boot/grub/i386-pc
        sudo cp -r /usr/lib/grub/i386-pc/* iso/boot/grub/i386-pc/
        
        # Create GRUB EFI boot files
        sudo mkdir -p iso/EFI/boot
        sudo grub-mkstandalone \
          --format=x86_64-efi \
          --output=iso/EFI/boot/bootx64.efi \
          --locales="" \
          --fonts="" \
          "boot/grub/grub.cfg=iso/EFI/boot/grub.cfg"
        
        # Alternative: Use syslinux for BIOS boot (more reliable)
        sudo mkdir -p iso/boot/isolinux
        sudo cp /usr/lib/ISOLINUX/isolinux.bin iso/boot/isolinux/
        sudo cp /usr/lib/syslinux/modules/bios/ldlinux.c32 iso/boot/isolinux/
        sudo cp /usr/lib/syslinux/modules/bios/libcom32.c32 iso/boot/isolinux/
        sudo cp /usr/lib/syslinux/modules/bios/libutil.c32 iso/boot/isolinux/
        sudo cp /usr/lib/syslinux/modules/bios/menu.c32 iso/boot/isolinux/
        
        # Create syslinux config (more reliable than GRUB for live CDs)
        cat > iso/boot/isolinux/isolinux.cfg << 'ISOLINUX_EOF'
        UI menu.c32
        PROMPT 0
        TIMEOUT 100
        DEFAULT vulpixos
        
        MENU TITLE VulpixOS 1.0 Stable
        MENU BACKGROUND
        MENU COLOR border 30;44 #40ffffff #a0000000 std
        MENU COLOR title 1;36;44 #9033ccff #a0000000 std
        MENU COLOR sel 7;37;40 #e0ffffff #20ffffff all
        MENU COLOR unsel 37;44 #50ffffff #a0000000 std
        MENU COLOR help 37;40 #c0ffffff #a0000000 std
        MENU COLOR timeout_msg 37;40 #80ffffff #00000000 std
        MENU COLOR timeout 1;37;40 #c0ffffff #00000000 std
        MENU COLOR msg07 37;40 #90ffffff #a0000000 std
        MENU COLOR tabmsg 31;40 #30ffffff #00000000 std
        
        LABEL vulpixos
        MENU LABEL VulpixOS Live
        KERNEL /boot/vmlinuz
        APPEND initrd=/boot/initrd.img boot=live components splash quiet
        
        LABEL vulpixos-nosplash
        MENU LABEL VulpixOS Live (No Splash)
        KERNEL /boot/vmlinuz
        APPEND initrd=/boot/initrd.img boot=live components
        
        LABEL vulpixos-safe
        MENU LABEL VulpixOS Safe Mode
        KERNEL /boot/vmlinuz
        APPEND initrd=/boot/initrd.img boot=live components nomodeset acpi=off
        
        LABEL vulpixos-debug
        MENU LABEL VulpixOS Debug Mode
        KERNEL /boot/vmlinuz
        APPEND initrd=/boot/initrd.img boot=live components debug
        
        LABEL memtest
        MENU LABEL Memory Test
        KERNEL /boot/memtest
        ISOLINUX_EOF
        
        # Create GRUB configuration for EFI
        cat > iso/EFI/boot/grub.cfg << 'GRUB_EFI_EOF'
        set timeout=10
        set default=0
        
        # EFI GRUB config
        insmod part_gpt
        insmod part_msdos
        insmod fat
        insmod iso9660
        insmod linux
        insmod normal
        insmod efi_gop
        insmod efi_uga
        
        menuentry "VulpixOS Live (UEFI)" {
            linux /boot/vmlinuz boot=live components splash quiet
            initrd /boot/initrd.img
        }
        
        menuentry "VulpixOS Live (UEFI, No Splash)" {
            linux /boot/vmlinuz boot=live components
            initrd /boot/initrd.img
        }
        
        menuentry "VulpixOS Safe Mode (UEFI)" {
            linux /boot/vmlinuz boot=live components nomodeset acpi=off
            initrd /boot/initrd.img
        }
        
        menuentry "VulpixOS Debug (UEFI)" {
            linux /boot/vmlinuz boot=live components debug
            initrd /boot/initrd.img
        }
        GRUB_EFI_EOF
    
    - name: Prepare boot files
      run: |
        # Verify and copy boot files
        if [ ! -f boot/vmlinuz ]; then
            echo "ERROR: vmlinuz not found!"
            exit 1
        fi
        
        if [ ! -f boot/initrd.img ]; then
            echo "ERROR: initrd.img not found!"
            exit 1
        fi
        
        cp boot/vmlinuz iso/boot/
        cp boot/initrd.img iso/boot/
        
        echo "Boot files prepared:"
        ls -la iso/boot/
    
    - name: Create optimized filesystem
      run: |
        # Create clean, optimized squashfs
        sudo mksquashfs rootfs iso/live/filesystem.squashfs \
          -comp xz -Xbcj x86 -b 1M \
          -processors $(nproc) \
          -e boot tmp var/tmp var/log \
          -wildcards
        
        # Create filesystem.size
        echo $(sudo du -sx --block-size=1 rootfs | cut -f1) > iso/live/filesystem.size
        
        echo "Filesystem created:"
        ls -lh iso/live/filesystem.squashfs
    
    - name: Create bootable ISO
      run: |
        # Create ISO with syslinux for BIOS and GRUB for EFI
        xorriso -as mkisofs \
          -iso-level 3 \
          -full-iso9660-filenames \
          -volid "VULPIXOS" \
          -appid "VulpixOS 1.0 Stable" \
          -publisher "VulpixOS Project" \
          -preparer "VulpixOS Build System" \
          -eltorito-boot boot/isolinux/isolinux.bin \
          -eltorito-catalog boot/isolinux/boot.cat \
          -no-emul-boot \
          -boot-load-size 4 \
          -boot-info-table \
          -eltorito-alt-boot \
          -e EFI/boot/bootx64.efi \
          -no-emul-boot \
          -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
          -isohybrid-gpt-basdat \
          -output VulpixOS.iso \
          iso/
        
        echo "ISO created:"
        ls -lh VulpixOS.iso
    
    - name: Test ISO integrity
      run: |
        echo "=== ISO Information ==="
        file VulpixOS.iso
        
        echo "=== ISO Structure ==="
        isoinfo -d -i VulpixOS.iso
        
        echo "=== Boot Files Check ==="
        isoinfo -l -i VulpixOS.iso | grep -E "(vmlinuz|initrd|filesystem)" | head -10
        
        echo "=== Filesystem Check ==="
        if [ -f iso/live/filesystem.squashfs ]; then
            echo "Squashfs integrity check:"
            sudo unsquashfs -ll iso/live/filesystem.squashfs | head -5
        fi
        
        echo "=== Boot Configuration Check ==="
        echo "BIOS boot files:"
        ls -la iso/boot/isolinux/
        echo "EFI boot files:"
        ls -la iso/EFI/boot/
    
    - name: Upload VulpixOS ISO
      uses: actions/upload-artifact@v4
      with:
        name: VulpixOS-Stable-ISO
        path: VulpixOS.iso
        retention-days: 30
        compression-level: 0
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: VulpixOS.iso
        name: VulpixOS ${{ github.ref_name }}
        body: |
          # VulpixOS 1.0 Stable Release
          
          A minimal, stable Linux distribution built for maximum reliability.
          
          ## Features
          - **Stable Kernel**: Linux 6.1.62 LTS with minimal configuration
          - **GNOME Desktop**: Clean, minimal GNOME environment
          - **VulpixOS Branding**: Proper OS identification (shows as VulpixOS in neofetch)
          - **Auto-login**: Automatic login as 'vulpix' user
          - **Network Ready**: NetworkManager with WiFi support
          - **Firefox ESR**: Stable web browser included
          - **Dual Boot**: Both BIOS (ISOLINUX) and UEFI (GRUB) compatible
          - **No SELinux/AppArmor**: Disabled for maximum stability
          
          ## Boot Options
          - **VulpixOS Live**: Standard boot mode
          - **VulpixOS Live (No Splash)**: Boot without splash screen
          - **VulpixOS Safe Mode**: Boot with safe graphics drivers
          - **VulpixOS Debug**: Boot with debug output
          
          ## Default Credentials
          - **Username**: vulpix
          - **Password**: live
          - **Root Password**: root
          
          ## Usage
          Write to USB drive:
          ```bash
          sudo dd if=VulpixOS.iso of=/dev/sdX bs=4M status=progress && sync
          ```
          
          Or use GUI tools like Rufus, Balena Etcher, or Ventoy.
          
          ## System Information
          - **Kernel**: Linux 6.1.62 LTS
          - **Base**: Debian/Ubuntu (rebranded as VulpixOS)
          - **Desktop**: GNOME
          - **Bootloader**: ISOLINUX (BIOS) + GRUB (EFI)
          - **Size**: ~2-3GB
          
          Run `neofetch` to see VulpixOS branding!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}