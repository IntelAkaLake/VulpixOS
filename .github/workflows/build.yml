# VulpixOS GitHub Actions workflow
# Fixed grub step to avoid needing /dev/sdb1 on GitHub runners
name: Build VulpixOS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential gcc make binutils libc6-dev \
            bc bison flex libssl-dev libelf-dev \
            debootstrap squashfs-tools genisoimage xorriso \
            isolinux syslinux-utils grub-pc-bin grub-efi-amd64-bin \
            mtools dosfstools gdisk efibootmgr

      - name: Create directory structure
        run: |
          mkdir -p build rootfs boot iso/boot/grub iso/EFI iso/live kernel scripts config

      - name: Download kernel source
        run: |
          cd build && wget -c https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.150.tar.xz

      - name: Extract and build kernel
        run: |
          mkdir -p kernel && cd kernel
          tar -xf ../build/linux-5.10.150.tar.xz
          cd linux-5.10.150
          make defconfig
          scripts/config --enable CONFIG_FRAMEBUFFER_CONSOLE
          scripts/config --enable CONFIG_DRM
          scripts/config --enable CONFIG_DRM_I915
          scripts/config --enable CONFIG_SND
          scripts/config --enable CONFIG_SND_HDA_INTEL
          scripts/config --enable CONFIG_EXT4_FS
          scripts/config --enable CONFIG_SQUASHFS
          scripts/config --enable CONFIG_SQUASHFS_XZ
          scripts/config --enable CONFIG_KERNEL_XZ
          scripts/config --enable CONFIG_RD_XZ
          scripts/config --enable CONFIG_EFI_STUB
          scripts/config --enable CONFIG_EFI
          scripts/config --enable CONFIG_EFIVAR_FS
          scripts/config --enable CONFIG_SECURITY_SELINUX_BOOTPARAM
          scripts/config --enable CONFIG_SECURITY_SELINUX_DISABLE
          scripts/config --set-val CONFIG_DEFAULT_SECURITY "selinux"
          make -j$(nproc)
          KERNEL_VERSION=$(make kernelversion)
          cp arch/x86/boot/bzImage ../../boot/vmlinuz-${KERNEL_VERSION}
          cp System.map ../../boot/System.map-${KERNEL_VERSION}
          ln -sf vmlinuz-${KERNEL_VERSION} ../../boot/vmlinuz
          ln -sf System.map-${KERNEL_VERSION} ../../boot/System.map

      - name: Create base rootfs
        run: |
          sudo debootstrap --variant=minbase --include=systemd,init jammy rootfs http://archive.ubuntu.com/ubuntu/

      - name: Install kernel modules
        run: |
          cd kernel/linux-5.10.150
          sudo make INSTALL_MOD_PATH=../../rootfs modules_install

      - name: Configure base system
        run: |
          sudo cp /etc/resolv.conf rootfs/etc/resolv.conf
          sudo mount --bind /dev rootfs/dev
          sudo mount --bind /dev/pts rootfs/dev/pts
          sudo mount --bind /proc rootfs/proc
          sudo mount --bind /sys rootfs/sys

          sudo chroot rootfs /bin/bash << 'CHROOT_EOF'
          export HOME=/root
          export LC_ALL=C
          export DEBIAN_FRONTEND=noninteractive

          cat > /etc/apt/sources.list << 'EOF'
          deb http://archive.ubuntu.com/ubuntu jammy main universe
          deb http://archive.ubuntu.com/ubuntu jammy-updates main universe
          deb http://security.ubuntu.com/ubuntu jammy-security main universe
          EOF

          apt update
          apt install -y --no-install-recommends \
            systemd init locales \
            initramfs-tools \
            live-boot live-boot-initramfs-tools \
            busybox-initramfs \
            network-manager \
            sudo bash-completion vim-tiny less \
            dbus-x11 xserver-xorg xserver-xorg-video-all \
            xserver-xorg-input-all xinit x11-xserver-utils \
            ubuntu-desktop-minimal \
            gnome-session gdm3 \
            firefox nautilus gnome-terminal \
            plymouth plymouth-themes policycoreutils

          locale-gen en_US.UTF-8
          update-locale LANG=en_US.UTF-8

          echo 'vulpixos' > /etc/hostname
          echo '127.0.0.1 localhost vulpixos' >> /etc/hosts

          useradd -m -s /bin/bash -G sudo vulpix
          echo 'vulpix:vulpix' | chpasswd
          echo 'root:root' | chpasswd

          mkdir -p /etc/systemd/system/getty@tty1.service.d
          cat > /etc/systemd/system/getty@tty1.service.d/override.conf << 'EOF'
          [Service]
          ExecStart=
          ExecStart=-/sbin/agetty --autologin vulpix --noclear %I $TERM
          EOF

          mkdir -p /etc/gdm3
          cat > /etc/gdm3/custom.conf << 'EOF'
          [daemon]
          AutomaticLoginEnable=true
          AutomaticLogin=vulpix
          EOF

          echo "SELINUX=disabled" > /etc/selinux/config

          update-alternatives --install /usr/share/plymouth/themes/default.plymouth default.plymouth /usr/share/plymouth/themes/ubuntu-logo/ubuntu-logo.plymouth 100
          update-alternatives --set default.plymouth /usr/share/plymouth/themes/ubuntu-logo/ubuntu-logo.plymouth

          systemctl enable NetworkManager
          systemctl enable gdm
          systemctl set-default graphical.target

          mkdir -p /etc/systemd/system/user@.service.d
          cat > /etc/systemd/system/user@.service.d/override.conf << 'EOF'
          [Service]
          TimeoutStopSec=20
          EOF

          KERNEL_VERSION=$(ls /lib/modules/ | head -1)
          update-initramfs -c -k "$KERNEL_VERSION"
          if [ ! -f "/boot/initrd.img-$KERNEL_VERSION" ]; then
              mkinitramfs -o "/boot/initrd.img-$KERNEL_VERSION" "$KERNEL_VERSION"
          fi
          cp "/boot/initrd.img-$KERNEL_VERSION" /boot/initrd.img
          CHROOT_EOF

          sudo cp rootfs/boot/initrd.img boot/initrd.img
          sudo umount rootfs/sys rootfs/proc rootfs/dev/pts rootfs/dev

      - name: Create GRUB configuration
        run: |
          cat > iso/boot/grub/grub.cfg << 'EOF'
          set timeout=5
          set default=0
          insmod all_video
          insmod gzio
          insmod part_gpt
          insmod ext2
          menuentry "VulpixOS Live" {
              search --no-floppy --set=root --label VULPIXOS
              linux /boot/vmlinuz boot=live live-media-path=/live/ toram quiet splash security=selinux=0 vt.global_cursor_default=0
              initrd /boot/initrd.img
          }
          EOF

          mkdir -p iso/EFI/BOOT
          cat > iso/EFI/BOOT/grub.cfg << 'EOF'
          set timeout=5
          set default=0
          insmod all_video
          insmod gzio
          insmod part_gpt
          insmod ext2
          menuentry "VulpixOS Live (EFI)" {
              search --no-floppy --set=root --label VULPIXOS
              linux /boot/vmlinuz boot=live live-media-path=/live/ toram quiet splash security=selinux=0 vt.global_cursor_default=0
              initrd /boot/initrd.img
          }
          EOF

      - name: Copy boot files to ISO
        run: |
          cp boot/vmlinuz iso/boot/
          cp boot/initrd.img iso/boot/
          mkdir -p iso/boot/grub/i386-pc
          grub-mkimage -o iso/boot/grub/i386-pc/core.img \
            -p /boot/grub \
            biosdisk part_msdos part_gpt ext2 normal configfile linux multiboot

      - name: Create EFI image
        run: |
          dd if=/dev/zero of=efiboot.img bs=1M count=64
          mkfs.vfat efiboot.img
          mmd -i efiboot.img ::/EFI
          mmd -i efiboot.img ::/EFI/BOOT
          mcopy -i efiboot.img iso/EFI/BOOT/bootx64.efi ::/EFI/BOOT/
          mcopy -i efiboot.img iso/EFI/BOOT/grub.cfg ::/EFI/BOOT/

      - name: Create squashfs and ISO
        run: |
          sudo mksquashfs rootfs iso/live/filesystem.squashfs -comp xz -processors $(nproc) -b 1M
          xorriso -as mkisofs \
            -volid "VULPIXOS" -r -J -joliet-long -iso-level 3 \
            --grub2-mbr /usr/lib/grub/i386-pc/boot_hybrid.img \
            --mbr-force-bootable \
            -append_partition 2 0xEF efiboot.img \
            -appended_part_as_gpt \
            -c /boot.catalog \
            -b boot/grub/i386-pc/core.img \
            -no-emul-boot -boot-load-size 4 -boot-info-table \
            --grub2-boot-info \
            --efi-boot-part --efi-boot-image \
            -eltorito-alt-boot -e '--interval:appended_partition_2:all::' \
            -no-emul-boot -o VulpixOS.iso iso/

      - name: Upload ISO as artifact
        uses: actions/upload-artifact@v4
        with:
          name: VulpixOS-ISO
          path: VulpixOS.iso
          retention-days: 30

      - name: Create Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: VulpixOS.iso
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
