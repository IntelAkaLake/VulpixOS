name: Build VulpixOS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential gcc make binutils libc6-dev
        sudo apt install -y bc bison flex libssl-dev libelf-dev
        sudo apt install -y debootstrap squashfs-tools genisoimage xorriso
        sudo apt install -y isolinux syslinux-utils grub-pc-bin grub-efi-amd64-bin
        sudo apt install -y mtools dosfstools
    
    - name: Create directory structure
      run: |
        mkdir -p build rootfs boot iso/boot/grub iso/live kernel scripts config
    
    - name: Download kernel source
      run: |
        cd build
        wget -c https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.1.38.tar.xz
        cd ..
    
    - name: Extract and build kernel
      run: |
        cd kernel
        tar -xf ../build/linux-6.1.38.tar.xz
        cd linux-6.1.38
        make defconfig
        
        # Enable essential features for live system
        scripts/config --enable CONFIG_DRM
        scripts/config --enable CONFIG_DRM_I915
        scripts/config --enable CONFIG_SND
        scripts/config --enable CONFIG_SND_HDA_INTEL
        scripts/config --enable CONFIG_EXT4_FS
        scripts/config --enable CONFIG_SQUASHFS
        scripts/config --enable CONFIG_SQUASHFS_XZ
        scripts/config --enable CONFIG_SQUASHFS_ZLIB
        scripts/config --enable CONFIG_SQUASHFS_LZO
        scripts/config --enable CONFIG_SQUASHFS_LZ4
        scripts/config --enable CONFIG_OVERLAY_FS
        scripts/config --enable CONFIG_TMPFS
        scripts/config --enable CONFIG_DEVTMPFS
        scripts/config --enable CONFIG_DEVTMPFS_MOUNT
        scripts/config --enable CONFIG_PROC_FS
        scripts/config --enable CONFIG_SYSFS
        scripts/config --enable CONFIG_KERNEL_XZ
        scripts/config --enable CONFIG_RD_XZ
        # Add live boot essentials
        scripts/config --enable CONFIG_BLK_DEV_LOOP
        scripts/config --enable CONFIG_BLK_DEV_RAM
        scripts/config --enable CONFIG_BLK_DEV_INITRD
        scripts/config --enable CONFIG_INITRAMFS_SOURCE
        scripts/config --enable CONFIG_RD_GZIP
        scripts/config --enable CONFIG_RD_BZIP2
        scripts/config --enable CONFIG_RD_LZMA
        scripts/config --enable CONFIG_RD_LZO
        scripts/config --enable CONFIG_RD_LZ4
        # Disable problematic features
        scripts/config --disable CONFIG_SECURITY_SELINUX
        scripts/config --disable CONFIG_SECURITY_APPARMOR
        
        make -j$(nproc)
        
        # Copy kernel with version detection
        KERNEL_VERSION=$(make kernelversion)
        cp arch/x86/boot/bzImage ../../boot/vmlinuz-${KERNEL_VERSION}
        cp System.map ../../boot/System.map-${KERNEL_VERSION}
        ln -sf vmlinuz-${KERNEL_VERSION} ../../boot/vmlinuz
        ln -sf System.map-${KERNEL_VERSION} ../../boot/System.map
        
        cd ../..
    
    - name: Create base rootfs
      run: |
        sudo debootstrap --variant=minbase --include=systemd,init,dbus jammy rootfs http://archive.ubuntu.com/ubuntu/
    
    - name: Install kernel modules
      run: |
        cd kernel/linux-6.1.38
        sudo make INSTALL_MOD_PATH=../../rootfs modules_install
        cd ../..
    
    - name: Configure base system
      run: |
        # Prepare chroot
        sudo cp /etc/resolv.conf rootfs/etc/resolv.conf
        
        # Mount for chroot
        sudo mount --bind /dev rootfs/dev
        sudo mount --bind /dev/pts rootfs/dev/pts
        sudo mount --bind /proc rootfs/proc
        sudo mount --bind /sys rootfs/sys
        
        # Configure system in chroot
        sudo chroot rootfs /bin/bash << 'CHROOT_EOF'
        export HOME=/root
        export LC_ALL=C
        export DEBIAN_FRONTEND=noninteractive
        
        # Add repositories
        cat > /etc/apt/sources.list << 'EOF'
        deb http://archive.ubuntu.com/ubuntu jammy main universe
        deb http://archive.ubuntu.com/ubuntu jammy-updates main universe
        deb http://security.ubuntu.com/ubuntu jammy-security main universe
        EOF
        
        # Update and install packages
        apt update
        
        # Install essential packages first
        apt install -y --no-install-recommends \
          systemd init locales dbus \
          initramfs-tools kmod \
          live-boot live-boot-initramfs-tools \
          busybox-initramfs \
          network-manager \
          sudo bash-completion vim-tiny less \
          ca-certificates
        
        # Install GNOME desktop (minimal)
        apt install -y --no-install-recommends \
          ubuntu-desktop-minimal \
          gnome-session gdm3 \
          firefox nautilus gnome-terminal \
          gnome-control-center gnome-settings-daemon
        
        # Configure locales
        locale-gen en_US.UTF-8
        update-locale LANG=en_US.UTF-8
        
        # Set hostname
        echo 'vulpixos' > /etc/hostname
        echo '127.0.0.1 localhost vulpixos' >> /etc/hosts
        
        # Create user
        useradd -m -s /bin/bash -G sudo vulpix
        echo 'vulpix:vulpix' | chpasswd
        echo 'root:root' | chpasswd
        
        # Configure GDM for auto-login
        mkdir -p /etc/gdm3
        cat > /etc/gdm3/custom.conf << 'EOF'
        [daemon]
        AutomaticLoginEnable=true
        AutomaticLogin=vulpix
        
        [security]
        
        [xdmcp]
        
        [chooser]
        
        [debug]
        EOF
        
        # Enable services
        systemctl enable NetworkManager
        systemctl enable gdm3
        
        # Disable problematic services
        systemctl disable apparmor || true
        systemctl disable snapd || true
        systemctl disable unattended-upgrades || true
        
        # Check what kernel modules we have
        echo "Available kernel modules:"
        ls -la /lib/modules/
        
        # Get the kernel version
        KERNEL_VERSION=$(ls /lib/modules/ | head -1)
        echo "Using kernel version: $KERNEL_VERSION"
        
        # Create initramfs configuration for live boot
        cat > /etc/initramfs-tools/modules << 'EOF'
        # Live boot essentials
        loop
        squashfs
        overlay
        isofs
        EOF
        
        # Configure live boot hooks
        mkdir -p /etc/initramfs-tools/hooks
        cat > /etc/initramfs-tools/hooks/live-boot << 'EOF'
        #!/bin/sh
        PREREQ=""
        prereqs() { echo "$PREREQ"; }
        case $1 in
        prereqs) prereqs; exit 0 ;;
        esac
        . /usr/share/initramfs-tools/hook-functions
        copy_exec /bin/mount
        copy_exec /bin/umount
        copy_exec /sbin/losetup
        manual_add_modules loop
        manual_add_modules squashfs
        manual_add_modules overlay
        manual_add_modules isofs
        EOF
        chmod +x /etc/initramfs-tools/hooks/live-boot
        
        # Create initramfs with explicit kernel version
        if [ -n "$KERNEL_VERSION" ]; then
            update-initramfs -c -k "$KERNEL_VERSION"
            
            # Check if it was created
            if [ -f "/boot/initrd.img-$KERNEL_VERSION" ]; then
                cp "/boot/initrd.img-$KERNEL_VERSION" /boot/initrd.img
                echo "Successfully created initrd.img"
            else
                echo "update-initramfs failed, trying mkinitramfs..."
                mkinitramfs -o "/boot/initrd.img-$KERNEL_VERSION" "$KERNEL_VERSION"
                cp "/boot/initrd.img-$KERNEL_VERSION" /boot/initrd.img
            fi
        else
            echo "ERROR: No kernel version found!"
            exit 1
        fi
        
        # Clean up to reduce image size
        apt autoremove -y
        apt autoclean
        rm -rf /var/lib/apt/lists/*
        rm -rf /tmp/*
        rm -rf /var/tmp/*
        
        CHROOT_EOF
        
        # Copy initramfs to host boot directory with error checking
        if [ -f rootfs/boot/initrd.img ]; then
            sudo cp rootfs/boot/initrd.img boot/initrd.img
        else
            echo "ERROR: No initrd.img found in rootfs!"
            echo "Contents of rootfs/boot:"
            sudo ls -la rootfs/boot/
            exit 1
        fi
        
        # Cleanup mounts
        sudo umount rootfs/sys rootfs/proc rootfs/dev/pts rootfs/dev
    
    - name: Create GRUB configuration
      run: |
        cat > iso/boot/grub/grub.cfg << 'EOF'
        set timeout=5
        set default=0
        
        # Load necessary modules
        insmod all_video
        insmod gzio
        insmod part_gpt
        insmod part_msdos
        insmod fat
        insmod iso9660
        insmod loopback
        insmod squash4
        
        menuentry "VulpixOS Live" {
            linux /boot/vmlinuz boot=live live-media-path=/live/ toram quiet splash nomodeset
            initrd /boot/initrd.img
        }
        
        menuentry "VulpixOS Live (Safe Graphics)" {
            linux /boot/vmlinuz boot=live live-media-path=/live/ toram quiet splash nomodeset vga=normal
            initrd /boot/initrd.img
        }
        
        menuentry "VulpixOS Debug Mode" {
            linux /boot/vmlinuz boot=live live-media-path=/live/ debug break=mount systemd.log_level=debug
            initrd /boot/initrd.img
        }
        
        menuentry "VulpixOS Persistent Mode" {
            linux /boot/vmlinuz boot=live live-media-path=/live/ persistence quiet splash nomodeset
            initrd /boot/initrd.img
        }
        EOF
    
    - name: Copy boot files to ISO
      run: |
        # Check if files exist before copying
        if [ ! -f boot/vmlinuz ]; then
            echo "ERROR: vmlinuz not found!"
            ls -la boot/
            exit 1
        fi
        
        if [ ! -f boot/initrd.img ]; then
            echo "ERROR: initrd.img not found!"
            ls -la boot/
            exit 1
        fi
        
        cp boot/vmlinuz iso/boot/
        cp boot/initrd.img iso/boot/
        
        # Verify files are copied
        ls -la iso/boot/
    
    - name: Create squashfs filesystem
      run: |
        # Clean up rootfs before creating squashfs
        sudo rm -f rootfs/etc/resolv.conf
        
        # Create squashfs with optimal settings for live system
        sudo mksquashfs rootfs iso/live/filesystem.squashfs \
          -comp xz \
          -processors $(nproc) \
          -b 1M \
          -Xbcj x86 \
          -e boot \
          -noappend
        
        # Verify the filesystem
        echo "SquashFS filesystem created:"
        ls -lh iso/live/filesystem.squashfs
        file iso/live/filesystem.squashfs
        
        # Test the filesystem integrity
        sudo unsquashfs -l iso/live/filesystem.squashfs | head -20
    
    - name: Create additional live boot files
      run: |
        # Create filesystem.size file
        echo $(sudo du -s rootfs | cut -f1) > iso/live/filesystem.size
        
        # Create manifest
        sudo chroot rootfs dpkg-query -W --showformat='${Package} ${Version}\n' > iso/live/filesystem.manifest
        
        # Create filesystem.packages
        sudo chroot rootfs dpkg-query -W --showformat='${Package}\n' > iso/live/filesystem.packages
    
    - name: Create ISO with proper structure
      run: |
        # Create isolinux structure as fallback
        mkdir -p iso/isolinux
        
        # Copy isolinux files
        cp /usr/lib/ISOLINUX/isolinux.bin iso/isolinux/
        cp /usr/lib/syslinux/modules/bios/menu.c32 iso/isolinux/
        cp /usr/lib/syslinux/modules/bios/hdt.c32 iso/isolinux/
        cp /usr/lib/syslinux/modules/bios/ldlinux.c32 iso/isolinux/
        cp /usr/lib/syslinux/modules/bios/libutil.c32 iso/isolinux/
        cp /usr/lib/syslinux/modules/bios/libmenu.c32 iso/isolinux/
        cp /usr/lib/syslinux/modules/bios/libcom32.c32 iso/isolinux/
        
        # Create isolinux.cfg
        cat > iso/isolinux/isolinux.cfg << 'EOF'
        DEFAULT live
        LABEL live
          MENU LABEL VulpixOS Live
          KERNEL /boot/vmlinuz
          APPEND initrd=/boot/initrd.img boot=live live-media-path=/live/ toram quiet splash nomodeset
        
        LABEL safe
          MENU LABEL VulpixOS Safe Mode
          KERNEL /boot/vmlinuz
          APPEND initrd=/boot/initrd.img boot=live live-media-path=/live/ toram quiet splash nomodeset vga=normal
        EOF
        
        # Create ISO with both BIOS and UEFI support
        xorriso -as mkisofs \
          -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
          -c isolinux/boot.cat \
          -b isolinux/isolinux.bin \
          -no-emul-boot \
          -boot-load-size 4 \
          -boot-info-table \
          -eltorito-alt-boot \
          -e boot/grub/efi.img \
          -no-emul-boot \
          -isohybrid-gpt-basdat \
          -r -J -joliet-long \
          -l -cache-inodes \
          -iso-level 3 \
          -full-iso9660-filenames \
          -volid "VulpixOS" \
          -publisher "VulpixOS Team" \
          -preparer "VulpixOS Build System" \
          -o VulpixOS.iso \
          iso/
        
        # Check final result
        ls -lh VulpixOS.iso
        file VulpixOS.iso
        
        # Test ISO integrity
        xorriso -indev VulpixOS.iso -find / -exec report_lba -- | head -10
    
    - name: Upload ISO as artifact
      uses: actions/upload-artifact@v4
      with:
        name: VulpixOS-ISO
        path: VulpixOS.iso
        retention-days: 30
    
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: VulpixOS.iso
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}